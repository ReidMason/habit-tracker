// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: habit_entries.sql

package sqlite3Storage

import (
	"context"
)

const createHabitEntry = `-- name: CreateHabitEntry :one
INSERT INTO habit_entries (habit_id, date) VALUES (?, ?) RETURNING id, habit_id, date, created_at, updated_at
`

type CreateHabitEntryParams struct {
	HabitID int64
	Date    string
}

// Create a new habit entry
func (q *Queries) CreateHabitEntry(ctx context.Context, arg CreateHabitEntryParams) (HabitEntry, error) {
	row := q.db.QueryRowContext(ctx, createHabitEntry, arg.HabitID, arg.Date)
	var i HabitEntry
	err := row.Scan(
		&i.ID,
		&i.HabitID,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHabitEntry = `-- name: DeleteHabitEntry :one
DELETE FROM habit_entries WHERE id = ? RETURNING id, habit_id, date, created_at, updated_at
`

// Delete a habit entry
func (q *Queries) DeleteHabitEntry(ctx context.Context, id int64) (HabitEntry, error) {
	row := q.db.QueryRowContext(ctx, deleteHabitEntry, id)
	var i HabitEntry
	err := row.Scan(
		&i.ID,
		&i.HabitID,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getHabitEntries = `-- name: GetHabitEntries :many
SELECT id, habit_id, date, created_at, updated_at FROM habit_entries WHERE habit_id = ?
`

// Retrieve all habit entries for a habit
func (q *Queries) GetHabitEntries(ctx context.Context, habitID int64) ([]HabitEntry, error) {
	rows, err := q.db.QueryContext(ctx, getHabitEntries, habitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HabitEntry
	for rows.Next() {
		var i HabitEntry
		if err := rows.Scan(
			&i.ID,
			&i.HabitID,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
