// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: habits.sql

package sqlite3Storage

import (
	"context"
	"database/sql"
)

const createHabit = `-- name: CreateHabit :one
INSERT INTO habits (user_id, name, description, colour) VALUES (?, ?, ?, ?) RETURNING id, user_id, name, description, created_at, updated_at, colour
`

type CreateHabitParams struct {
	UserID      int64
	Name        string
	Description sql.NullString
	Colour      string
}

// Create a new habit
func (q *Queries) CreateHabit(ctx context.Context, arg CreateHabitParams) (Habit, error) {
	row := q.db.QueryRowContext(ctx, createHabit,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.Colour,
	)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Colour,
	)
	return i, err
}

const deleteHabit = `-- name: DeleteHabit :one
DELETE FROM habits WHERE id = ? RETURNING id, user_id, name, description, created_at, updated_at, colour
`

// Delete a habit by ID
func (q *Queries) DeleteHabit(ctx context.Context, id int64) (Habit, error) {
	row := q.db.QueryRowContext(ctx, deleteHabit, id)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Colour,
	)
	return i, err
}

const getHabit = `-- name: GetHabit :one
SELECT id, user_id, name, description, created_at, updated_at, colour FROM habits WHERE id = ?
`

// Retrieve a habit by ID
func (q *Queries) GetHabit(ctx context.Context, id int64) (Habit, error) {
	row := q.db.QueryRowContext(ctx, getHabit, id)
	var i Habit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Colour,
	)
	return i, err
}

const getHabits = `-- name: GetHabits :many
SELECT id, user_id, name, description, created_at, updated_at, colour FROM habits WHERE user_id = ?
`

// Retrieve all habits for a user
func (q *Queries) GetHabits(ctx context.Context, userID int64) ([]Habit, error) {
	rows, err := q.db.QueryContext(ctx, getHabits, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Habit
	for rows.Next() {
		var i Habit
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Colour,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
